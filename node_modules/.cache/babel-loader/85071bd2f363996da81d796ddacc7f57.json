{"ast":null,"code":"import _objectSpread from \"/home/teko/work/new_explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n *    SPDX-License-Identifier: Apache-2.0\n */\nimport { post, get } from '../../../services/request';\nimport { login as loginAction, network as networkAction, register as registerAction, unregister as unRegisterAction, userlist as userListAction, error as errorAction } from '../../../actions/auth';\nimport actions from '../charts/actions';\nimport Auth from '../../Auth';\n\nvar login = function login(_ref, networkObj) {\n  var user = _ref.user,\n      password = _ref.password;\n  return function (dispatch) {\n    return post('/auth/login', {\n      user: user,\n      password: password,\n      network: networkObj\n    }).then(function (resp) {\n      Auth.authenticateUser(resp.token);\n      dispatch(errorAction(null));\n      dispatch(loginAction(_objectSpread({\n        user: user\n      }, resp)));\n      return {\n        status: 'Success'\n      };\n    }).catch(function (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n      dispatch(errorAction(JSON.stringify(error)));\n      return {\n        status: 'Error',\n        message: 'Invalid User, Password'\n      };\n    });\n  };\n};\n\nvar network = function network() {\n  return function (dispatch) {\n    return get('/auth/networklist', {}).then(function (_ref2) {\n      var networkList = _ref2.networkList;\n      dispatch(networkAction({\n        networks: networkList\n      }));\n    }).catch(function (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n      dispatch(actions.getErroMessage(error));\n    });\n  };\n};\n\nvar register = function register(user) {\n  return function (dispatch) {\n    return post('/api/register', _objectSpread({}, user)).then(function (resp) {\n      if (resp.status === 500) {\n        dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));\n      } else if (resp.status === 400) {\n        var message = resp.message;\n        var msg = message.substr(6);\n        return {\n          status: 'error',\n          message: msg\n        };\n      } else {\n        dispatch(registerAction(_objectSpread(_objectSpread({}, user), resp)));\n        return {\n          status: 'success',\n          message: 'registered successfully!'\n        };\n      }\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(errorAction(error));\n    });\n  };\n};\n\nvar userlist = function userlist() {\n  return function (dispatch) {\n    return get('/api/userlist').then(function (resp) {\n      if (resp.status === 500) {\n        dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));\n      } else if (resp.status === 400) {\n        var message = resp.message;\n        var msg = message.substr(6);\n        return {\n          status: 'error',\n          message: msg\n        };\n      } else {\n        dispatch(userListAction(_objectSpread({}, resp)));\n        return {\n          status: 'success',\n          message: resp\n        };\n      }\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(errorAction(error));\n    });\n  };\n};\n\nvar unregister = function unregister(user) {\n  return function (dispatch) {\n    return post('/api/unregister', _objectSpread({}, user)).then(function (resp) {\n      if (resp.status === 500) {\n        dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));\n      } else if (resp.status === 400) {\n        var message = resp.message;\n        var msg = message.substr(6);\n        return {\n          status: 'error',\n          message: msg\n        };\n      } else {\n        dispatch(unRegisterAction(_objectSpread(_objectSpread({}, user), resp)));\n        return {\n          status: 'success',\n          message: 'Unregistered successfully!'\n        };\n      }\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(errorAction(error));\n    });\n  };\n};\n\nvar logout = function logout() {\n  return function (dispatch) {\n    return post('/auth/logout', {}).then(function (resp) {\n      console.log(resp);\n      Auth.deauthenticateUser();\n      dispatch(errorAction(null));\n      return {\n        status: 'Success'\n      };\n    }).catch(function (error) {\n      console.error(error);\n      dispatch(actions.getErroMessage(error));\n      return {\n        status: 'Error',\n        message: 'Invalid User token'\n      };\n    });\n  };\n};\n\nexport default {\n  login: login,\n  network: network,\n  register: register,\n  unregister: unregister,\n  userlist: userlist,\n  logout: logout\n};","map":{"version":3,"sources":["/home/teko/work/new_explorer/client/src/state/redux/auth/operations.js"],"names":["post","get","login","loginAction","network","networkAction","register","registerAction","unregister","unRegisterAction","userlist","userListAction","error","errorAction","actions","Auth","networkObj","user","password","dispatch","then","resp","authenticateUser","token","status","catch","console","JSON","stringify","message","networkList","networks","getErroMessage","msg","substr","logout","log","deauthenticateUser"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport { post, get } from '../../../services/request';\n\nimport {\n\tlogin as loginAction,\n\tnetwork as networkAction,\n\tregister as registerAction,\n\tunregister as unRegisterAction,\n\tuserlist as userListAction,\n\terror as errorAction\n} from '../../../actions/auth';\n\nimport actions from '../charts/actions';\n\nimport Auth from '../../Auth';\n\nconst login = ({ user, password }, networkObj) => dispatch =>\n\tpost('/auth/login', { user, password, network: networkObj })\n\t\t.then(resp => {\n\t\t\tAuth.authenticateUser(resp.token);\n\t\t\tdispatch(errorAction(null));\n\t\t\tdispatch(loginAction({ user, ...resp }));\n\t\t\treturn { status: 'Success' };\n\t\t})\n\t\t.catch(error => {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(JSON.stringify(error)));\n\t\t\treturn { status: 'Error', message: 'Invalid User, Password' };\n\t\t});\n\nconst network = () => dispatch =>\n\tget('/auth/networklist', {})\n\t\t.then(({ networkList }) => {\n\t\t\tdispatch(networkAction({ networks: networkList }));\n\t\t})\n\t\t.catch(error => {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(error);\n\t\t\tdispatch(actions.getErroMessage(error));\n\t\t});\n\nconst register = user => dispatch =>\n\tpost('/api/register', { ...user })\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(registerAction({ ...user, ...resp }));\n\t\t\t\treturn { status: 'success', message: 'registered successfully!' };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst userlist = () => dispatch =>\n\tget('/api/userlist')\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(userListAction({ ...resp }));\n\t\t\t\treturn { status: 'success', message: resp };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst unregister = user => dispatch =>\n\tpost('/api/unregister', { ...user })\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(unRegisterAction({ ...user, ...resp }));\n\t\t\t\treturn { status: 'success', message: 'Unregistered successfully!' };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst logout = () => dispatch =>\n\tpost('/auth/logout', {})\n\t\t.then(resp => {\n\t\t\tconsole.log(resp);\n\t\t\tAuth.deauthenticateUser();\n\t\t\tdispatch(errorAction(null));\n\t\t\treturn { status: 'Success' };\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(actions.getErroMessage(error));\n\t\t\treturn { status: 'Error', message: 'Invalid User token' };\n\t\t});\n\nexport default {\n\tlogin,\n\tnetwork,\n\tregister,\n\tunregister,\n\tuserlist,\n\tlogout\n};\n"]},"metadata":{},"sourceType":"module"}