{"ast":null,"code":"/**\r\n *    SPDX-License-Identifier: Apache-2.0\r\n */\nimport { combineReducers } from 'redux';\nimport types from './types';\n/* Reducers for Dashboard Charts */\n\nvar initialState = {};\n\nvar blockPerHourReducer = function blockPerHourReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.BLOCK_CHART_HOUR) {\n    return {\n      rows: action.payload.blockPerHour.rows,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar errorMessageReducer = function errorMessageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.ERROR_MESSAGE) {\n    return {\n      error: action.payload\n    };\n  } else {\n    return state;\n  }\n};\n\nvar blockPerMinReducer = function blockPerMinReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.BLOCK_CHART_MIN) {\n    return {\n      rows: action.payload.blockPerMin.rows,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar channelListReducer = function channelListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.CHANNEL_LIST) {\n    return {\n      list: action.payload.channels,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar channelReducer = function channelReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.CHANNEL || action.type === types.CHANGE_CHANNEL) {\n    console.log(\"binhnt.state.redux.charts.channelReducer: payload.channel: \", action.payload.channel);\n    return action.payload.channel;\n  } else {\n    return state;\n  }\n};\n\nvar dashStatsReducer = function dashStatsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.DASHBOARD_STATS) {\n    return action.payload;\n  } else {\n    return state;\n  }\n};\n\nvar blockActivityReducer = function blockActivityReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.BLOCK_ACTIVITY) {\n    return {\n      rows: action.payload.row,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar notificationReducer = function notificationReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.NOTIFICATION_LOAD) {\n    return action.payload.notification;\n  } else {\n    return state;\n  }\n};\n\nvar peerStatusReducer = function peerStatusReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.PEER_STATUS) {\n    console.log('xxxxxxxxxxxxxxxxxxxxxxxx', action.payload.peers);\n    return {\n      list: action.payload.peers,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar transactionByOrgReducer = function transactionByOrgReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.TRANSACTION_CHART_ORG) {\n    return {\n      rows: action.payload.rows,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar transactionPerHourReducer = function transactionPerHourReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.TRANSACTION_CHART_HOUR) {\n    return {\n      rows: action.payload.transactionPerHour.rows,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar transactionPerMinReducer = function transactionPerMinReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (action.type === types.TRANSACTION_CHART_MIN) {\n    return {\n      rows: action.payload.transactionPerMin.rows,\n      loaded: true,\n      errors: action.errors\n    };\n  } else {\n    return state;\n  }\n};\n\nvar reducer = combineReducers({\n  blockPerHour: blockPerHourReducer,\n  blockPerMin: blockPerMinReducer,\n  channel: channelReducer,\n  channelList: channelListReducer,\n  dashStats: dashStatsReducer,\n  notification: notificationReducer,\n  peerStatus: peerStatusReducer,\n  transactionByOrg: transactionByOrgReducer,\n  transactionPerHour: transactionPerHourReducer,\n  transactionPerMin: transactionPerMinReducer,\n  errorMessage: errorMessageReducer,\n  blockActivity: blockActivityReducer\n});\nexport default reducer;","map":{"version":3,"sources":["/home/teko/work/new_explorer/client/src/state/redux/charts/reducers.js"],"names":["combineReducers","types","initialState","blockPerHourReducer","state","action","type","BLOCK_CHART_HOUR","rows","payload","blockPerHour","loaded","errors","errorMessageReducer","ERROR_MESSAGE","error","blockPerMinReducer","BLOCK_CHART_MIN","blockPerMin","channelListReducer","CHANNEL_LIST","list","channels","channelReducer","CHANNEL","CHANGE_CHANNEL","console","log","channel","dashStatsReducer","DASHBOARD_STATS","blockActivityReducer","BLOCK_ACTIVITY","row","notificationReducer","NOTIFICATION_LOAD","notification","peerStatusReducer","PEER_STATUS","peers","transactionByOrgReducer","TRANSACTION_CHART_ORG","transactionPerHourReducer","TRANSACTION_CHART_HOUR","transactionPerHour","transactionPerMinReducer","TRANSACTION_CHART_MIN","transactionPerMin","reducer","channelList","dashStats","peerStatus","transactionByOrg","errorMessage","blockActivity"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,eAAT,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;AACA,IAAMC,YAAY,GAAG,EAArB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAuC;AAAA,MAAtCC,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAClE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACM,gBAA1B,EAA4C;AAC3C,WAAO;AACNC,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeC,YAAf,CAA4BF,IAD5B;AAENG,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAWA,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAuC;AAAA,MAAtCT,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAClE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACa,aAA1B,EAAyC;AACxC,WAAO;AACNC,MAAAA,KAAK,EAAEV,MAAM,CAACI;AADR,KAAP;AAGA,GAJD,MAIO;AACN,WAAOL,KAAP;AACA;AACD,CARD;;AAUA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,GAAuC;AAAA,MAAtCZ,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACjE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACgB,eAA1B,EAA2C;AAC1C,WAAO;AACNT,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeS,WAAf,CAA2BV,IAD3B;AAENG,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAYA,IAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,GAAuC;AAAA,MAAtCf,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACjE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACmB,YAA1B,EAAwC;AACvC,WAAO;AACNC,MAAAA,IAAI,EAAEhB,MAAM,CAACI,OAAP,CAAea,QADf;AAENX,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAYA,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,GAAuC;AAAA,MAAtCnB,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAC7D,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACuB,OAAtB,IAAiCnB,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACwB,cAA3D,EAA2E;AAC1EC,IAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ,EAA2EtB,MAAM,CAACI,OAAP,CAAemB,OAA1F;AACA,WAAOvB,MAAM,CAACI,OAAP,CAAemB,OAAtB;AACA,GAHD,MAGO;AACN,WAAOxB,KAAP;AACA;AACD,CAPD;;AASA,IAAMyB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAuC;AAAA,MAAtCzB,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAC/D,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAAC6B,eAA1B,EAA2C;AAC1C,WAAOzB,MAAM,CAACI,OAAd;AACA,GAFD,MAEO;AACN,WAAOL,KAAP;AACA;AACD,CAND;;AAOA,IAAM2B,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAuC;AAAA,MAAtC3B,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACnE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAAC+B,cAA1B,EAA0C;AACzC,WAAO;AACNxB,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAewB,GADf;AAENtB,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAWA,IAAM8B,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAuC;AAAA,MAAtC9B,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAClE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACkC,iBAA1B,EAA6C;AAC5C,WAAO9B,MAAM,CAACI,OAAP,CAAe2B,YAAtB;AACA,GAFD,MAEO;AACN,WAAOhC,KAAP;AACA;AACD,CAND;;AAQA,IAAMiC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAuC;AAAA,MAAtCjC,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AAChE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACqC,WAA1B,EAAuC;AACtCZ,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCtB,MAAM,CAACI,OAAP,CAAe8B,KAAvD;AACA,WAAO;AACNlB,MAAAA,IAAI,EAAEhB,MAAM,CAACI,OAAP,CAAe8B,KADf;AAEN5B,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAPD,MAOO;AACN,WAAOR,KAAP;AACA;AACD,CAXD;;AAaA,IAAMoC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAuC;AAAA,MAAtCpC,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACtE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAACwC,qBAA1B,EAAiD;AAChD,WAAO;AACNjC,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD,IADf;AAENG,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAYA,IAAMsC,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAuC;AAAA,MAAtCtC,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACxE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAAC0C,sBAA1B,EAAkD;AACjD,WAAO;AACNnC,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAemC,kBAAf,CAAkCpC,IADlC;AAENG,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAYA,IAAMyC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAuC;AAAA,MAAtCzC,KAAsC,uEAA9BF,YAA8B;AAAA,MAAhBG,MAAgB,uEAAP,EAAO;;AACvE,MAAIA,MAAM,CAACC,IAAP,KAAgBL,KAAK,CAAC6C,qBAA1B,EAAiD;AAChD,WAAO;AACNtC,MAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAesC,iBAAf,CAAiCvC,IADjC;AAENG,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAEP,MAAM,CAACO;AAHT,KAAP;AAKA,GAND,MAMO;AACN,WAAOR,KAAP;AACA;AACD,CAVD;;AAYA,IAAM4C,OAAO,GAAGhD,eAAe,CAAC;AAC/BU,EAAAA,YAAY,EAAEP,mBADiB;AAE/Be,EAAAA,WAAW,EAAEF,kBAFkB;AAG/BY,EAAAA,OAAO,EAAEL,cAHsB;AAI/B0B,EAAAA,WAAW,EAAE9B,kBAJkB;AAK/B+B,EAAAA,SAAS,EAAErB,gBALoB;AAM/BO,EAAAA,YAAY,EAAEF,mBANiB;AAO/BiB,EAAAA,UAAU,EAAEd,iBAPmB;AAQ/Be,EAAAA,gBAAgB,EAAEZ,uBARa;AAS/BI,EAAAA,kBAAkB,EAAEF,yBATW;AAU/BK,EAAAA,iBAAiB,EAAEF,wBAVY;AAW/BQ,EAAAA,YAAY,EAAExC,mBAXiB;AAY/ByC,EAAAA,aAAa,EAAEvB;AAZgB,CAAD,CAA/B;AAeA,eAAeiB,OAAf","sourcesContent":["/**\r\n *    SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { combineReducers } from 'redux';\r\nimport types from './types';\r\n\r\n/* Reducers for Dashboard Charts */\r\nconst initialState = {};\r\n\r\nconst blockPerHourReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.BLOCK_CHART_HOUR) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.blockPerHour.rows,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\nconst errorMessageReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.ERROR_MESSAGE) {\r\n\t\treturn {\r\n\t\t\terror: action.payload\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst blockPerMinReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.BLOCK_CHART_MIN) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.blockPerMin.rows,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst channelListReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.CHANNEL_LIST) {\r\n\t\treturn {\r\n\t\t\tlist: action.payload.channels,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst channelReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.CHANNEL || action.type === types.CHANGE_CHANNEL) {\r\n\t\tconsole.log(\"binhnt.state.redux.charts.channelReducer: payload.channel: \", action.payload.channel)\r\n\t\treturn action.payload.channel;\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst dashStatsReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.DASHBOARD_STATS) {\r\n\t\treturn action.payload;\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\nconst blockActivityReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.BLOCK_ACTIVITY) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.row,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\nconst notificationReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.NOTIFICATION_LOAD) {\r\n\t\treturn action.payload.notification;\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst peerStatusReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.PEER_STATUS) {\r\n\t\tconsole.log('xxxxxxxxxxxxxxxxxxxxxxxx', action.payload.peers)\r\n\t\treturn {\r\n\t\t\tlist: action.payload.peers,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst transactionByOrgReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.TRANSACTION_CHART_ORG) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.rows,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst transactionPerHourReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.TRANSACTION_CHART_HOUR) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.transactionPerHour.rows,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst transactionPerMinReducer = (state = initialState, action = {}) => {\r\n\tif (action.type === types.TRANSACTION_CHART_MIN) {\r\n\t\treturn {\r\n\t\t\trows: action.payload.transactionPerMin.rows,\r\n\t\t\tloaded: true,\r\n\t\t\terrors: action.errors\r\n\t\t};\r\n\t} else {\r\n\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst reducer = combineReducers({\r\n\tblockPerHour: blockPerHourReducer,\r\n\tblockPerMin: blockPerMinReducer,\r\n\tchannel: channelReducer,\r\n\tchannelList: channelListReducer,\r\n\tdashStats: dashStatsReducer,\r\n\tnotification: notificationReducer,\r\n\tpeerStatus: peerStatusReducer,\r\n\ttransactionByOrg: transactionByOrgReducer,\r\n\ttransactionPerHour: transactionPerHourReducer,\r\n\ttransactionPerMin: transactionPerMinReducer,\r\n\terrorMessage: errorMessageReducer,\r\n\tblockActivity: blockActivityReducer\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}