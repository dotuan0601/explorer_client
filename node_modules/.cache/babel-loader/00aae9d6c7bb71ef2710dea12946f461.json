{"ast":null,"code":"import _classCallCheck from \"/home/teko/work/new_explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/teko/work/new_explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/teko/work/new_explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/teko/work/new_explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/teko/work/new_explorer/client/src/components/Charts/ChartStats.js\";\n\n/**\n *    SPDX-License-Identifier: Apache-2.0\n */\nimport React, { Component } from 'react';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport moment from 'moment-timezone';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport classnames from 'classnames';\nimport { chartSelectors, chartOperations } from '../../state/redux/charts';\nimport TimeChart from './TimeChart';\nimport { blockPerHourType, blockPerMinType, currentChannelType, getBlocksPerHourType, getBlocksPerMinType, getTransactionPerHourType, getTransactionPerMinType, transactionPerHourType, transactionPerMinType } from '../../consts/types';\nvar blockPerHourSelector = chartSelectors.blockPerHourSelector,\n    blockPerMinSelector = chartSelectors.blockPerMinSelector,\n    currentChannelSelector = chartSelectors.currentChannelSelector,\n    transactionPerHourSelector = chartSelectors.transactionPerHourSelector,\n    transactionPerMinSelector = chartSelectors.transactionPerMinSelector;\n/* istanbul ignore next */\n\nvar styles = function styles(theme) {\n  var type = theme.palette.type;\n  var dark = type === 'dark';\n  return {\n    chart: {\n      color: dark ? '#ffffff' : undefined,\n      backgroundColor: dark ? '#453e68' : undefined\n    }\n  };\n};\n\nexport var ChartStats = /*#__PURE__*/function (_Component) {\n  _inherits(ChartStats, _Component);\n\n  var _super = _createSuper(ChartStats);\n\n  function ChartStats(props) {\n    var _this;\n\n    _classCallCheck(this, ChartStats);\n\n    _this = _super.call(this, props);\n\n    _this.syncData = function (currentChannel) {\n      var _this$props = _this.props,\n          getBlocksPerHour = _this$props.getBlocksPerHour,\n          getBlocksPerMin = _this$props.getBlocksPerMin,\n          getTransactionPerHour = _this$props.getTransactionPerHour,\n          getTransactionPerMin = _this$props.getTransactionPerMin;\n      getBlocksPerMin(currentChannel);\n      getBlocksPerHour(currentChannel);\n      getTransactionPerMin(currentChannel);\n      getTransactionPerHour(currentChannel);\n    };\n\n    _this.timeDataSetup = function () {\n      var chartData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var dataMax = 0;\n      var displayData = chartData.map(function (data) {\n        if (parseInt(data.count, 10) > dataMax) {\n          dataMax = parseInt(data.count, 10);\n        }\n\n        return {\n          datetime: moment(data.datetime).tz(moment.tz.guess()).format('h:mm A'),\n          count: data.count\n        };\n      });\n      dataMax += 5;\n      return {\n        displayData: displayData,\n        dataMax: dataMax\n      };\n    };\n\n    _this.toggle = function (tab) {\n      _this.setState({\n        activeTab: tab\n      });\n    };\n\n    _this.state = {\n      activeTab: '1'\n    };\n    return _this;\n  }\n\n  _createClass(ChartStats, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.interVal = setInterval(function () {\n        var currentChannel = _this2.props.currentChannel;\n\n        _this2.syncData(currentChannel);\n      }, 60000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interVal);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var activeTab = this.state.activeTab;\n      var _this$props2 = this.props,\n          blockPerHour = _this$props2.blockPerHour,\n          blockPerMin = _this$props2.blockPerMin,\n          transactionPerHour = _this$props2.transactionPerHour,\n          transactionPerMin = _this$props2.transactionPerMin,\n          classes = _this$props2.classes;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.chart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(Nav, {\n        tabs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: classnames({\n          active: activeTab === '1'\n        }),\n        onClick: function onClick() {\n          _this3.toggle('1');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }, \"BLOCKS / HOUR\")), /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: classnames({\n          active: activeTab === '2'\n        }),\n        onClick: function onClick() {\n          _this3.toggle('2');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, \"BLOCKS / MIN\")), /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: classnames({\n          active: activeTab === '3'\n        }),\n        onClick: function onClick() {\n          _this3.toggle('3');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }, \"TX / HOUR\")), /*#__PURE__*/React.createElement(NavItem, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: classnames({\n          active: activeTab === '4'\n        }),\n        onClick: function onClick() {\n          _this3.toggle('4');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }\n      }, \"TX / MIN\"))), /*#__PURE__*/React.createElement(TabContent, {\n        activeTab: activeTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(TimeChart, {\n        chartData: this.timeDataSetup(blockPerHour),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(TimeChart, {\n        chartData: this.timeDataSetup(blockPerMin),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(TimeChart, {\n        chartData: this.timeDataSetup(transactionPerHour),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(TabPane, {\n        tabId: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(TimeChart, {\n        chartData: this.timeDataSetup(transactionPerMin),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 7\n        }\n      }))));\n    }\n  }]);\n\n  return ChartStats;\n}(Component);\nChartStats.propTypes = {\n  blockPerHour: blockPerHourType.isRequired,\n  blockPerMin: blockPerMinType.isRequired,\n  currentChannel: currentChannelType.isRequired,\n  getBlocksPerHour: getBlocksPerHourType.isRequired,\n  getBlocksPerMin: getBlocksPerMinType.isRequired,\n  getTransactionPerHour: getTransactionPerHourType.isRequired,\n  getTransactionPerMin: getTransactionPerMinType.isRequired,\n  transactionPerHour: transactionPerHourType.isRequired,\n  transactionPerMin: transactionPerMinType.isRequired\n};\nexport default compose(withStyles(styles), connect(function (state) {\n  return {\n    blockPerHour: blockPerHourSelector(state),\n    blockPerMin: blockPerMinSelector(state),\n    transactionPerHour: transactionPerHourSelector(state),\n    transactionPerMin: transactionPerMinSelector(state),\n    currentChannel: currentChannelSelector(state)\n  };\n}, {\n  getBlocksPerHour: chartOperations.blockPerHour,\n  getBlocksPerMin: chartOperations.blockPerMin,\n  getTransactionPerHour: chartOperations.transactionPerHour,\n  getTransactionPerMin: chartOperations.transactionPerMin\n}))(ChartStats);","map":{"version":3,"sources":["/home/teko/work/new_explorer/client/src/components/Charts/ChartStats.js"],"names":["React","Component","compose","withStyles","connect","moment","TabContent","TabPane","Nav","NavItem","NavLink","classnames","chartSelectors","chartOperations","TimeChart","blockPerHourType","blockPerMinType","currentChannelType","getBlocksPerHourType","getBlocksPerMinType","getTransactionPerHourType","getTransactionPerMinType","transactionPerHourType","transactionPerMinType","blockPerHourSelector","blockPerMinSelector","currentChannelSelector","transactionPerHourSelector","transactionPerMinSelector","styles","theme","type","palette","dark","chart","color","undefined","backgroundColor","ChartStats","props","syncData","currentChannel","getBlocksPerHour","getBlocksPerMin","getTransactionPerHour","getTransactionPerMin","timeDataSetup","chartData","dataMax","displayData","map","data","parseInt","count","datetime","tz","guess","format","toggle","tab","setState","activeTab","state","interVal","setInterval","clearInterval","blockPerHour","blockPerMin","transactionPerHour","transactionPerMin","classes","active","propTypes","isRequired"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport React, { Component } from 'react';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport moment from 'moment-timezone';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport classnames from 'classnames';\nimport { chartSelectors, chartOperations } from '../../state/redux/charts';\nimport TimeChart from './TimeChart';\nimport {\n\tblockPerHourType,\n\tblockPerMinType,\n\tcurrentChannelType,\n\tgetBlocksPerHourType,\n\tgetBlocksPerMinType,\n\tgetTransactionPerHourType,\n\tgetTransactionPerMinType,\n\ttransactionPerHourType,\n\ttransactionPerMinType\n} from '../../consts/types';\n\nconst {\n\tblockPerHourSelector,\n\tblockPerMinSelector,\n\tcurrentChannelSelector,\n\ttransactionPerHourSelector,\n\ttransactionPerMinSelector\n} = chartSelectors;\n\n/* istanbul ignore next */\nconst styles = theme => {\n\tconst { type } = theme.palette;\n\tconst dark = type === 'dark';\n\treturn {\n\t\tchart: {\n\t\t\tcolor: dark ? '#ffffff' : undefined,\n\t\t\tbackgroundColor: dark ? '#453e68' : undefined\n\t\t}\n\t};\n};\n\nexport class ChartStats extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactiveTab: '1'\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.interVal = setInterval(() => {\n\t\t\tconst { currentChannel } = this.props;\n\t\t\tthis.syncData(currentChannel);\n\t\t}, 60000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.interVal);\n\t}\n\n\tsyncData = currentChannel => {\n\t\tconst {\n\t\t\tgetBlocksPerHour,\n\t\t\tgetBlocksPerMin,\n\t\t\tgetTransactionPerHour,\n\t\t\tgetTransactionPerMin\n\t\t} = this.props;\n\n\t\tgetBlocksPerMin(currentChannel);\n\t\tgetBlocksPerHour(currentChannel);\n\t\tgetTransactionPerMin(currentChannel);\n\t\tgetTransactionPerHour(currentChannel);\n\t};\n\n\ttimeDataSetup = (chartData = []) => {\n\t\tlet dataMax = 0;\n\t\tconst displayData = chartData.map(data => {\n\t\t\tif (parseInt(data.count, 10) > dataMax) {\n\t\t\t\tdataMax = parseInt(data.count, 10);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdatetime: moment(data.datetime)\n\t\t\t\t\t.tz(moment.tz.guess())\n\t\t\t\t\t.format('h:mm A'),\n\t\t\t\tcount: data.count\n\t\t\t};\n\t\t});\n\n\t\tdataMax += 5;\n\n\t\treturn {\n\t\t\tdisplayData,\n\t\t\tdataMax\n\t\t};\n\t};\n\n\ttoggle = tab => {\n\t\tthis.setState({\n\t\t\tactiveTab: tab\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { activeTab } = this.state;\n\t\tconst {\n\t\t\tblockPerHour,\n\t\t\tblockPerMin,\n\t\t\ttransactionPerHour,\n\t\t\ttransactionPerMin,\n\t\t\tclasses\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div className={classes.chart}>\n\t\t\t\t<Nav tabs>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '1'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('1');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBLOCKS / HOUR\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '2'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('2');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBLOCKS / MIN\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '3'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('3');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTX / HOUR\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '4'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('4');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTX / MIN\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t</Nav>\n\t\t\t\t<TabContent activeTab={activeTab}>\n\t\t\t\t\t<TabPane tabId=\"1\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(blockPerHour)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"2\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(blockPerMin)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"3\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(transactionPerHour)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"4\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(transactionPerMin)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t</TabContent>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nChartStats.propTypes = {\n\tblockPerHour: blockPerHourType.isRequired,\n\tblockPerMin: blockPerMinType.isRequired,\n\tcurrentChannel: currentChannelType.isRequired,\n\tgetBlocksPerHour: getBlocksPerHourType.isRequired,\n\tgetBlocksPerMin: getBlocksPerMinType.isRequired,\n\tgetTransactionPerHour: getTransactionPerHourType.isRequired,\n\tgetTransactionPerMin: getTransactionPerMinType.isRequired,\n\ttransactionPerHour: transactionPerHourType.isRequired,\n\ttransactionPerMin: transactionPerMinType.isRequired\n};\n\nexport default compose(\n\twithStyles(styles),\n\tconnect(\n\t\tstate => ({\n\t\t\tblockPerHour: blockPerHourSelector(state),\n\t\t\tblockPerMin: blockPerMinSelector(state),\n\t\t\ttransactionPerHour: transactionPerHourSelector(state),\n\t\t\ttransactionPerMin: transactionPerMinSelector(state),\n\t\t\tcurrentChannel: currentChannelSelector(state)\n\t\t}),\n\t\t{\n\t\t\tgetBlocksPerHour: chartOperations.blockPerHour,\n\t\t\tgetBlocksPerMin: chartOperations.blockPerMin,\n\t\t\tgetTransactionPerHour: chartOperations.transactionPerHour,\n\t\t\tgetTransactionPerMin: chartOperations.transactionPerMin\n\t\t}\n\t)\n)(ChartStats);\n"]},"metadata":{},"sourceType":"module"}