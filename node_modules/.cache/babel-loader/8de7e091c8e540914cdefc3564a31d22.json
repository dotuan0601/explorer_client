{"ast":null,"code":"/**\r\n *    SPDX-License-Identifier: Apache-2.0\r\n */\nimport types from './types';\n\nvar getBlockPerHour = function getBlockPerHour(blockPerHour) {\n  return {\n    type: types.BLOCK_CHART_HOUR,\n    payload: {\n      blockPerHour: blockPerHour\n    }\n  };\n};\n\nvar getErroMessage = function getErroMessage(errorMessage) {\n  return {\n    type: types.ERROR_MESSAGE,\n    payload: errorMessage\n  };\n};\n\nvar getBlockPerMin = function getBlockPerMin(blockPerMin) {\n  return {\n    type: types.BLOCK_CHART_MIN,\n    payload: {\n      blockPerMin: blockPerMin\n    }\n  };\n};\n\nvar getChannel = function getChannel(channel) {\n  return {\n    type: types.CHANNEL,\n    payload: {\n      channel: channel\n    }\n  };\n};\n\nvar getChannelList = function getChannelList(channelList) {\n  return {\n    type: types.CHANNEL_LIST,\n    payload: channelList\n  };\n};\n\nvar getDashStats = function getDashStats(dashStats) {\n  return {\n    type: types.DASHBOARD_STATS,\n    payload: dashStats\n  };\n};\n\nvar getNotification = function getNotification(notification) {\n  return {\n    type: types.NOTIFICATION_LOAD,\n    payload: {\n      notification: notification\n    }\n  };\n};\n\nvar getPeerStatus = function getPeerStatus(peerStatus) {\n  return {\n    type: types.PEER_STATUS,\n    payload: peerStatus\n  };\n};\n\nvar getBlockActivity = function getBlockActivity(blocks) {\n  return {\n    type: types.BLOCK_ACTIVITY,\n    payload: blocks\n  };\n};\n\nvar getTransactionByOrg = function getTransactionByOrg(transactionByOrg) {\n  return {\n    type: types.TRANSACTION_CHART_ORG,\n    payload: transactionByOrg\n  };\n};\n\nvar getTransactionPerHour = function getTransactionPerHour(transactionPerHour) {\n  return {\n    type: types.TRANSACTION_CHART_HOUR,\n    payload: {\n      transactionPerHour: transactionPerHour\n    }\n  };\n};\n\nvar getTransactionPerMin = function getTransactionPerMin(transactionPerMin) {\n  return {\n    type: types.TRANSACTION_CHART_MIN,\n    payload: {\n      transactionPerMin: transactionPerMin\n    }\n  };\n};\n\nvar updateChannel = function updateChannel(channel) {\n  return {\n    type: types.CHANGE_CHANNEL,\n    payload: {\n      channel: channel\n    }\n  };\n};\n\nexport default {\n  getBlockPerHour: getBlockPerHour,\n  getBlockPerMin: getBlockPerMin,\n  getChannel: getChannel,\n  getChannelList: getChannelList,\n  getDashStats: getDashStats,\n  getNotification: getNotification,\n  getPeerStatus: getPeerStatus,\n  getTransactionByOrg: getTransactionByOrg,\n  getTransactionPerHour: getTransactionPerHour,\n  getTransactionPerMin: getTransactionPerMin,\n  updateChannel: updateChannel,\n  getErroMessage: getErroMessage,\n  getBlockActivity: getBlockActivity\n};","map":{"version":3,"sources":["/home/teko/work/new_explorer/client/src/state/redux/charts/actions.js"],"names":["types","getBlockPerHour","blockPerHour","type","BLOCK_CHART_HOUR","payload","getErroMessage","errorMessage","ERROR_MESSAGE","getBlockPerMin","blockPerMin","BLOCK_CHART_MIN","getChannel","channel","CHANNEL","getChannelList","channelList","CHANNEL_LIST","getDashStats","dashStats","DASHBOARD_STATS","getNotification","notification","NOTIFICATION_LOAD","getPeerStatus","peerStatus","PEER_STATUS","getBlockActivity","blocks","BLOCK_ACTIVITY","getTransactionByOrg","transactionByOrg","TRANSACTION_CHART_ORG","getTransactionPerHour","transactionPerHour","TRANSACTION_CHART_HOUR","getTransactionPerMin","transactionPerMin","TRANSACTION_CHART_MIN","updateChannel","CHANGE_CHANNEL"],"mappings":"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","sourcesContent":["/**\r\n *    SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport types from './types';\r\n\r\nconst getBlockPerHour = blockPerHour => ({\r\n\ttype: types.BLOCK_CHART_HOUR,\r\n\tpayload: { blockPerHour }\r\n});\r\nconst getErroMessage = errorMessage => ({\r\n\ttype: types.ERROR_MESSAGE,\r\n\tpayload: errorMessage\r\n});\r\n\r\nconst getBlockPerMin = blockPerMin => ({\r\n\ttype: types.BLOCK_CHART_MIN,\r\n\tpayload: { blockPerMin }\r\n});\r\n\r\nconst getChannel = channel => ({\r\n\ttype: types.CHANNEL,\r\n\tpayload: { channel }\r\n});\r\n\r\nconst getChannelList = channelList => ({\r\n\ttype: types.CHANNEL_LIST,\r\n\tpayload: channelList\r\n});\r\n\r\nconst getDashStats = dashStats => ({\r\n\ttype: types.DASHBOARD_STATS,\r\n\tpayload: dashStats\r\n});\r\n\r\nconst getNotification = notification => ({\r\n\ttype: types.NOTIFICATION_LOAD,\r\n\tpayload: { notification }\r\n});\r\n\r\nconst getPeerStatus = peerStatus => ({\r\n\ttype: types.PEER_STATUS,\r\n\tpayload: peerStatus\r\n});\r\nconst getBlockActivity = blocks => ({\r\n\ttype: types.BLOCK_ACTIVITY,\r\n\tpayload: blocks\r\n});\r\nconst getTransactionByOrg = transactionByOrg => ({\r\n\ttype: types.TRANSACTION_CHART_ORG,\r\n\tpayload: transactionByOrg\r\n});\r\n\r\nconst getTransactionPerHour = transactionPerHour => ({\r\n\ttype: types.TRANSACTION_CHART_HOUR,\r\n\tpayload: { transactionPerHour }\r\n});\r\n\r\nconst getTransactionPerMin = transactionPerMin => ({\r\n\ttype: types.TRANSACTION_CHART_MIN,\r\n\tpayload: { transactionPerMin }\r\n});\r\n\r\nconst updateChannel = channel => ({\r\n\ttype: types.CHANGE_CHANNEL,\r\n\tpayload: { channel }\r\n});\r\n\r\nexport default {\r\n\tgetBlockPerHour,\r\n\tgetBlockPerMin,\r\n\tgetChannel,\r\n\tgetChannelList,\r\n\tgetDashStats,\r\n\tgetNotification,\r\n\tgetPeerStatus,\r\n\tgetTransactionByOrg,\r\n\tgetTransactionPerHour,\r\n\tgetTransactionPerMin,\r\n\tupdateChannel,\r\n\tgetErroMessage,\r\n\tgetBlockActivity\r\n};\r\n"]},"metadata":{},"sourceType":"module"}