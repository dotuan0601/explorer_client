{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */\nimport { arrayOf, shape, number, string, func } from 'prop-types';\nexport var blockHashType = shape({\n  blockhash: string,\n  blocknum: number,\n  channelname: string,\n  creatdt: string,\n  datahash: string,\n  prehash: string,\n  txcount: number,\n  txhash: arrayOf(string)\n});\nexport var blockListType = arrayOf(shape({\n  blockhash: string,\n  blocknum: number,\n  channelname: string,\n  createdt: string,\n  datahash: string,\n  prehash: string,\n  txcount: number,\n  txhash: arrayOf(string)\n}));\nexport var blockPerHourType = arrayOf(shape({\n  count: string,\n  datetime: string\n}));\nexport var blockPerMinType = arrayOf(shape({\n  count: string,\n  datetime: string\n}));\nexport var chaincodeType = shape({\n  chaincodename: string,\n  channelName: string,\n  channel_genesis_hash: string,\n  path: string,\n  source: string,\n  txCount: number,\n  version: string\n});\nexport var chaincodeListType = arrayOf(shape({\n  chaincodename: string,\n  channelName: string,\n  channel_genesis_hash: string,\n  path: string,\n  source: string,\n  txCount: number,\n  version: string\n}));\nexport var channelsType = arrayOf(shape({\n  blocks: number,\n  channel_hash: string,\n  channelname: string,\n  createdat: string,\n  channel_genesis_hash: string,\n  id: number,\n  transactions: number\n}));\nexport var chartDataType = shape({\n  dataMax: number.isRequired,\n  displayData: arrayOf(shape({\n    count: string,\n    datetime: string\n  })).isRequired\n});\nexport var currentChannelType = string;\nexport var dashStatsType = shape({\n  chaincodeCount: string,\n  latestBlock: string,\n  peerCount: string,\n  txCount: string\n});\nexport var getBlockListType = func;\nexport var getBlocksPerHourType = func;\nexport var getBlocksPerMinType = func;\nexport var getChaincodeListType = func;\nexport var getChangeChannelType = func;\nexport var getChannelType = func;\nexport var getChannelListType = func;\nexport var getChannelsType = func;\nexport var getDashStatsType = func;\nexport var getPeerListType = func;\nexport var getPeerStatusType = func;\nexport var getTransactionInfoType = func;\nexport var getTransactionListType = func;\nexport var getTransactionType = func;\nexport var getTransactionByOrgType = func;\nexport var getTransactionPerHourType = func;\nexport var getTransactionPerMinType = func;\nexport var getUserListType = func;\nexport var notificationsType = arrayOf(shape({\n  blockhash: string,\n  datahash: string,\n  time: string,\n  title: string,\n  txcount: number,\n  type: string\n}));\nexport var onCloseType = func;\nexport var peerListType = arrayOf(shape({\n  channel_genesis_hash: string,\n  name: string,\n  requests: string.isRequired,\n  server_hostname: string.isRequired\n}));\nexport var peerStatusType = arrayOf(shape({\n  server_hostname: string,\n  status: string\n}));\nexport var refreshType = func;\nexport var transactionType = shape({\n  chaincodename: string,\n  channelname: string,\n  createdt: string,\n  creator_msp_id: string,\n  endorser_msp_id: string,\n  payload_proposal_hash: string,\n  txhash: string,\n  type: string,\n  validation_code: string\n});\nexport var transactionByOrgType = arrayOf(shape({\n  count: string,\n  creator_msp_id: string\n}));\nexport var transactionListType = arrayOf(shape({\n  chaincodename: string,\n  channelname: string,\n  createdt: string,\n  creator_msp_id: string,\n  txhash: string,\n  type: string\n}));\nexport var transactionPerHourType = arrayOf(shape({\n  count: string,\n  datetime: string\n}));\nexport var transactionPerMinType = arrayOf(shape({\n  count: string,\n  datetime: string\n}));\nexport var userListType = arrayOf(shape({\n  username: string,\n  email: string,\n  networkName: string,\n  firstName: string,\n  lastName: string,\n  roles: string\n}));","map":{"version":3,"sources":["/home/teko/work/new_explorer/client/src/consts/types/index.js"],"names":["arrayOf","shape","number","string","func","blockHashType","blockhash","blocknum","channelname","creatdt","datahash","prehash","txcount","txhash","blockListType","createdt","blockPerHourType","count","datetime","blockPerMinType","chaincodeType","chaincodename","channelName","channel_genesis_hash","path","source","txCount","version","chaincodeListType","channelsType","blocks","channel_hash","createdat","id","transactions","chartDataType","dataMax","isRequired","displayData","currentChannelType","dashStatsType","chaincodeCount","latestBlock","peerCount","getBlockListType","getBlocksPerHourType","getBlocksPerMinType","getChaincodeListType","getChangeChannelType","getChannelType","getChannelListType","getChannelsType","getDashStatsType","getPeerListType","getPeerStatusType","getTransactionInfoType","getTransactionListType","getTransactionType","getTransactionByOrgType","getTransactionPerHourType","getTransactionPerMinType","getUserListType","notificationsType","time","title","type","onCloseType","peerListType","name","requests","server_hostname","peerStatusType","status","refreshType","transactionType","creator_msp_id","endorser_msp_id","payload_proposal_hash","validation_code","transactionByOrgType","transactionListType","transactionPerHourType","transactionPerMinType","userListType","username","email","networkName","firstName","lastName","roles"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport { arrayOf, shape, number, string, func } from 'prop-types';\n\nexport const blockHashType = shape({\n\tblockhash: string,\n\tblocknum: number,\n\tchannelname: string,\n\tcreatdt: string,\n\tdatahash: string,\n\tprehash: string,\n\ttxcount: number,\n\ttxhash: arrayOf(string)\n});\n\nexport const blockListType = arrayOf(\n\tshape({\n\t\tblockhash: string,\n\t\tblocknum: number,\n\t\tchannelname: string,\n\t\tcreatedt: string,\n\t\tdatahash: string,\n\t\tprehash: string,\n\t\ttxcount: number,\n\t\ttxhash: arrayOf(string)\n\t})\n);\n\nexport const blockPerHourType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const blockPerMinType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const chaincodeType = shape({\n\tchaincodename: string,\n\tchannelName: string,\n\tchannel_genesis_hash: string,\n\tpath: string,\n\tsource: string,\n\ttxCount: number,\n\tversion: string\n});\n\nexport const chaincodeListType = arrayOf(\n\tshape({\n\t\tchaincodename: string,\n\t\tchannelName: string,\n\t\tchannel_genesis_hash: string,\n\t\tpath: string,\n\t\tsource: string,\n\t\ttxCount: number,\n\t\tversion: string\n\t})\n);\n\nexport const channelsType = arrayOf(\n\tshape({\n\t\tblocks: number,\n\t\tchannel_hash: string,\n\t\tchannelname: string,\n\t\tcreatedat: string,\n\t\tchannel_genesis_hash: string,\n\t\tid: number,\n\t\ttransactions: number\n\t})\n);\n\nexport const chartDataType = shape({\n\tdataMax: number.isRequired,\n\tdisplayData: arrayOf(\n\t\tshape({\n\t\t\tcount: string,\n\t\t\tdatetime: string\n\t\t})\n\t).isRequired\n});\n\nexport const currentChannelType = string;\n\nexport const dashStatsType = shape({\n\tchaincodeCount: string,\n\tlatestBlock: string,\n\tpeerCount: string,\n\ttxCount: string\n});\n\nexport const getBlockListType = func;\nexport const getBlocksPerHourType = func;\nexport const getBlocksPerMinType = func;\nexport const getChaincodeListType = func;\nexport const getChangeChannelType = func;\nexport const getChannelType = func;\nexport const getChannelListType = func;\nexport const getChannelsType = func;\nexport const getDashStatsType = func;\nexport const getPeerListType = func;\nexport const getPeerStatusType = func;\nexport const getTransactionInfoType = func;\nexport const getTransactionListType = func;\nexport const getTransactionType = func;\nexport const getTransactionByOrgType = func;\nexport const getTransactionPerHourType = func;\nexport const getTransactionPerMinType = func;\nexport const getUserListType = func;\n\nexport const notificationsType = arrayOf(\n\tshape({\n\t\tblockhash: string,\n\t\tdatahash: string,\n\t\ttime: string,\n\t\ttitle: string,\n\t\ttxcount: number,\n\t\ttype: string\n\t})\n);\n\nexport const onCloseType = func;\n\nexport const peerListType = arrayOf(\n\tshape({\n\t\tchannel_genesis_hash: string,\n\t\tname: string,\n\t\trequests: string.isRequired,\n\t\tserver_hostname: string.isRequired\n\t})\n);\n\nexport const peerStatusType = arrayOf(\n\tshape({\n\t\tserver_hostname: string,\n\t\tstatus: string\n\t})\n);\n\nexport const refreshType = func;\n\nexport const transactionType = shape({\n\tchaincodename: string,\n\tchannelname: string,\n\tcreatedt: string,\n\tcreator_msp_id: string,\n\tendorser_msp_id: string,\n\tpayload_proposal_hash: string,\n\ttxhash: string,\n\ttype: string,\n\tvalidation_code: string\n});\n\nexport const transactionByOrgType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tcreator_msp_id: string\n\t})\n);\n\nexport const transactionListType = arrayOf(\n\tshape({\n\t\tchaincodename: string,\n\t\tchannelname: string,\n\t\tcreatedt: string,\n\t\tcreator_msp_id: string,\n\t\ttxhash: string,\n\t\ttype: string\n\t})\n);\n\nexport const transactionPerHourType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const transactionPerMinType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const userListType = arrayOf(\n\tshape({\n\t\tusername: string,\n\t\temail: string,\n\t\tnetworkName: string,\n\t\tfirstName: string,\n\t\tlastName: string,\n\t\troles: string\n\t})\n);\n"]},"metadata":{},"sourceType":"module"}